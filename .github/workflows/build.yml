name: Build

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Create and Enable 3G Swap
        run: |
          sudo swapoff -a
          sudo fallocate -l 3G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Install dependencies
        run: |
          # Install dependencies
          sudo apt update
          sudo DEBIAN_FRONTEND=noninteractive apt install -yq --no-install-recommends \
            python3 python-is-python3 git curl libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip

          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.model }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."

          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git

          # SukiSU patches
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"

          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags

          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          echo "Adding KernelSU SukiSU..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-test

          git submodule update --init --recursive

      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          echo "Applying kernel SUSFS patches..."

          # Copy SUSFS patches
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Change to common directory and apply SUSFS patch
          cd ./common
          # Patch OnePlus 13 include
          sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c

          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch

      - name: Apply KSUN Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          # Apply hooks patch
          cp ../../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 --fuzz=3 < syscall_hooks.patch

      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          # Apply spoof patch
          cp ../../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 --fuzz=3 < 69_hide_stuff.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          echo "Adding configuration settings to gki_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add SukiSU configuration settings
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add SukiSU manual hook
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add tethering config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add bbr and fq config setting
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_DEFAULT_CUBIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo 'CONFIG_DEFAULT_TCP_CONG="bbr"' >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_NET_SCH_HTB=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig

          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ inputs.kernel_version }}" != "6.6" ]; then
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
          echo "CONFIG_KSU_SUSFS_SUS_PATH=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

          # Add rcu config setting
          echo "CONFIG_RCU_TRACE=n" >> ./common/arch/arm64/configs/gki_defconfig

          # Add personal config setting
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: Force ECN + Reduce overhead
        run: |
          cd "$CONFIG/kernel_platform/common/net/ipv4"
          sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 1;/' tcp_ipv4.c
          grep "sysctl_tcp_ecn" tcp_ipv4.c
          #sed -i '/\.procname[[:space:]]*=[[:space:]]*"tcp_ecn"/, /^[[:space:]]*\}/ s/SYSCTL_TWO/SYSCTL_ONE/' sysctl_net_ipv4.c
          grep -A6 '\.procname.*tcp_ecn' sysctl_net_ipv4.c
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' tcp_ipv4.c
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' tcp_ipv4.c
          grep "sysctl_tcp_pacing" tcp_ipv4.c
          ls -t | grep -E 'tcp_|sysctl_'

      - name: Apply ZRAM
        run: |
          set -x

          cd "$CONFIG/kernel_platform"

          echo "Copy files"

          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/

          echo "Apply LZ4KD"

          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./common
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4k_oplus.patch ./common
          pushd ./common
          patch -p1 -F 3 < lz4kd.patch
          patch -p1 -F 3 < lz4k_oplus.patch
          popd

          echo "Adjust configuration"

          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig

          echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"

          echo "Running sed commands..."

          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "./common/arch/arm64/configs/gki_defconfig"

          # Run sed commands for modifications
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"

          ANDROID_VERSION=${{ inputs.android_version }}
          RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
          RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
          RANDOM_SUFFIX="${RANDOM_DIGIT}-g${RANDOM_HASH}-kdevlab"

          for path in \
            common/scripts/setlocalversion \
            msm-kernel/scripts/setlocalversion \
            external/dtc/scripts/setlocalversion; do

            [ -f "$path" ] || continue

            echo "Modifying: $path"

            # Remove -dirty
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"

            if grep -q 'KERNELVERSION.*scm_version' "$path"; then
              echo "Detected NEW setlocalversion format"
              sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-${ANDROID_VERSION}-${RANDOM_SUFFIX}\"|" "$path"
            elif grep -q 'echo "\$res"' "$path"; then
              echo "Detected OLD setlocalversion format"
              sed -i "s/^res=.*/res=\"-${ANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
            else
              echo "Unknown format, appending echo manually"
              echo "echo \"\$res-${RANDOM_SUFFIX}\"" >> "$path"
            fi

            chmod +x "$path"
          done

          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh

          # Run perl command to modify UTS_VERSION
          CURRENT_TIME=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          echo "CURRENT_TIME=$CURRENT_TIME"
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./common/scripts/mkcompile_h
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./msm-kernel/scripts/mkcompile_h

          # Apply specific Makefile modification for kernel versions 6.1 and 6.6 only
          if [ "${{ inputs.kernel_version }}" = "6.1" ] || [ "${{ inputs.kernel_version }}" = "6.6" ]; then
            sed -i -e "s|\$(preempt-flag-y) \"\$(build-timestamp)\"|\$(preempt-flag-y) \"$CURRENT_TIME\"|" ./common/init/Makefile
            sed -i -e "s|\$(preempt-flag-y) \"\$(build-timestamp)\"|\$(preempt-flag-y) \"$CURRENT_TIME\"|" ./msm-kernel/init/Makefile
          fi

          find . -type f -exec sed -i 's/\(make\s\+-C[^\n]*\)\s\+/\1 -j$(nproc) /g' {} +

      - name: Compress patched kernel source
        run: |
          echo "Preparing kernel source: $CONFIG"
          cd "$GITHUB_WORKSPACE"
          tar -cf "source-patched-$CONFIG.tar.gz" \
          --use-compress-program=pigz \
          --exclude='.git' --exclude='out' \
          -C "$CONFIG/kernel_platform" common

      - name: Upload patched kernel source
        uses: actions/upload-artifact@v4
        with:
          name: source-patched-${{ env.CONFIG }}
          path: source-patched-${{ env.CONFIG }}.tar.gz
          compression-level: 0
          retention-days: 1

      - name: Clear patched kernel source
        run: |
          rm -v "source-patched-$CONFIG.tar.gz"

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Building the kernel..."

          # Clear Cache
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'

          # Remove protected exports
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin --verbose_failures)
          # OnePlus 13 adjustments
          BUILD_TYPE="perf"
          BAZEL_ARGS+=(-g)

          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT

          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: Download and Unzip ZRAM
        id: zram_find
        run: |
          set -e
          sudo apt install -y unzip
          curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | xargs wget -N
          unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module
          target="./ZRAM-Module/zram/zram.ko"
          search_paths=(
            "./$CONFIG/kernel_platform/out"
            "./$CONFIG/device/qcom"
          )
          zram_path=""
          for path in "${search_paths[@]}"; do
            zram_path=$(find "$path" -type f -name "zram.ko" | head -n 1)
            [ -n "$zram_path" ] && break
          done
          if [ -z "$zram_path" ]; then
            zram_path=$(find "./$CONFIG" -type f -name "zram.ko" | head -n 1)
          fi
          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            echo " ZRAM module file finally located at: $zram_path "
            mkdir -p "$(dirname "$target")"
            if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
              cp "$zram_path" "$target"
            else
              echo "Skip copy"
            fi

            pushd ./ZRAM-Module
            echo "ZRAM_ALGO=lz4kd" > ./config.prop
            echo "ZRAM_SIZE=12884901888" >> ./config.prop
            zip -r ../zram-module.zip .
            popd
          else
            echo "Not found"
            echo "upload=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: Copy and patch images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Patching image"
          pushd ./out/dist
          curl -LOSs --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          popd

          echo "Copying image"
          cp ./out/dist/Image ../AnyKernel3/Image
          cp ./out/dist/dtbo.img ../AnyKernel3/

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="AnyKernel3_${{ inputs.model }}_${{ inputs.android_version }}_${{ inputs.kernel_version }}_SukiSU_SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

          # Fengchi Patch for OP13
          if [ "${{ inputs.model }}" == "OP13" ]; then
            sed -i 's/hmbird/xxbird/g' dtbo.img
            zip -r "../$ZIP_NAME-CN-version.zip" ./*
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          compression-level: 0
          path: |
            *.zip
